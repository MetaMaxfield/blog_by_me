from django.test import SimpleTestCase
from parameterized import parameterized

from services.template_tags import service_ru_plural


class RuPluralTest(SimpleTestCase):
    """Тестирование функции service_ru_plural"""

    @parameterized.expand(
        [
            ('1_value', 1, 'файл,файла,файлов', 'файл'),  # оканчивается на 1, не на 11
            ('2_value', 2, 'файл,файла,файлов', 'файла'),  # оканчивается на 2, не на 12
            ('4_value', 4, 'файл,файла,файлов', 'файла'),  # оканчивается на 4, не на 14
            ('5_value', 5, 'файл,файла,файлов', 'файлов'),  # оканчивается на 5 — всегда множественное
            ('11_value', 11, 'файл,файла,файлов', 'файлов'),  # 11 — исключение, всегда множественное
            ('14_value', 14, 'файл,файла,файлов', 'файлов'),  # 14 — исключение, всегда множественное
            ('21_value', 21, 'файл,файла,файлов', 'файл'),  # оканчивается на 1, не на 11
            ('22_value', 22, 'файл,файла,файлов', 'файла'),  # оканчивается на 2, не на 12
            ('25_value', 25, 'файл,файла,файлов', 'файлов'),  # оканчивается на 5 — всегда множественное
            ('101_value', 101, 'файл,файла,файлов', 'файл'),  # оканчивается на 1, не на 11
            ('111_value', 111, 'файл,файла,файлов', 'файлов'),  # оканчивается на 11 — исключение
            ('1001_value', 1001, 'файл,файла,файлов', 'файл'),  # оканчивается на 1, не на 11
            ('1014_value', 1014, 'файл,файла,файлов', 'файлов'),  # оканчивается на 14 — исключение
        ]
    )
    def test_service_ru_plural(self, _, value, variants, expected_variant):
        fact_variant = service_ru_plural(value, variants)
        self.assertEqual(fact_variant, expected_variant)
